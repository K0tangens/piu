import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
TOKEN = '7828065577:AAGOfwVgzCsJwYPKc7K32pZZPyG6ZBVOB_g'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminders = {}
user_reminders = {}


@dp.message(Command(commands=['start']))
async def send_welcome(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n"
                        "–û—Ç–ø—Ä–∞–≤—å /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")

@dp.message(Command(commands=[ 'help']))
async def send_welcome(message: Message):
    await message.reply("üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                        "/remind_time [–≤—Ä–µ–º—è] [—Ç–µ–∫—Å—Ç] - –Ω–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30–º, 2—á15–º, 1–¥)\n"
                        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
                        "/delete [‚Ññ] - —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n"
                        "üìù –ü—Ä–∏–º–µ—Ä—ã:\n"
                        "/remind_time 30–º –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
                        "/remind_time 2—á15–º –°–¥–µ–ª–∞—Ç—å –î–ó\n")

@dp.message(Command(commands=['remind_time']))
async def set_timed_reminder(message: Message):
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            raise ValueError("–û–π! –ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

        _, time_str, reminder_text = parts
        time_delta = parse_time(time_str)
        reminder_time = datetime.now() + time_delta

        await create_reminder(message.from_user.id, reminder_text, reminder_time)
        await message.reply(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
                            f"–ß–µ—Ä–µ–∑ {time_str} —è –Ω–∞–ø–æ–º–Ω—é {reminder_text}")

    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ {e}\n–§–æ—Ä–º–∞—Ç: /remind_time 30–º –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")





async def create_reminder(user_id, text, reminder_time):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä"""
    reminder_id = str(len(reminders) + 1)
    time_left = (reminder_time - datetime.now()).total_seconds()

    reminders[reminder_id] = {
        'user_id': user_id,
        'text': text,
        'time': reminder_time,
        'timer': None
    }

    if user_id not in user_reminders:
        user_reminders[user_id] = []
    user_reminders[user_id].append(reminder_id)

    timer_task = asyncio.create_task(send_reminder(reminder_id, time_left))
    reminders[reminder_id]['timer'] = timer_task


def parse_time(time_str):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1h30m –≤ timedelta"""
    time_delta = timedelta()
    num = 0

    for ch in time_str:
        if ch.isdigit():
            num = num * 10 + int(ch)
        else:
            if ch == '–¥':
                time_delta += timedelta(days=num)
            elif ch == '—á':
                time_delta += timedelta(hours=num)
            elif ch == '–º':
                time_delta += timedelta(minutes=num)
            else:
                raise ValueError(f"–û–π! –í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –º–µ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ {ch}")
            num = 0

    if time_delta.total_seconds() <= 0:
        raise ValueError("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")

    return time_delta


def parse_datetime(date_str, time_str):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ datetime"""
    now = datetime.now()

    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤—Ä–µ–º—è (–º–æ–∂–µ—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è)
    try:
        if ':' in time_str:
            time_part = datetime.strptime(time_str, "%H:%M").time()
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ (–¥–µ–Ω—å –∏ –º–µ—Å—è—Ü)
        if '.' in date_str:
            date_part = datetime.strptime(date_str, "%d.%m").date()
            return datetime.combine(date_part, time_part)
        else:
            # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞
            proposed_time = datetime.combine(now.date(), time_part)
            if proposed_time > now:
                return proposed_time
            else:
                return proposed_time + timedelta(days=1)

    except ValueError:
        # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –¥–∞—Ç–∞, –∞ –≤—Ä–µ–º—è (–∫–æ–≥–¥–∞ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞)
        if ':' in date_str:
            time_part = datetime.strptime(date_str, "%H:%M").time()
            proposed_time = datetime.combine(now.date(), time_part)
            if proposed_time > now:
                return proposed_time
            else:
                return proposed_time + timedelta(days=1)
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏")


@dp.message(Command(commands=['list']))
async def list_reminders(message: Message):
    try:
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_reminders or not user_reminders[user_id]:
            await message.reply(" –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
            return

        active_reminders = []
        expired_reminders = []
        current_time = datetime.now()

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
        for reminder_id in list(user_reminders[user_id]):
            if reminder_id in reminders:
                reminder = reminders[reminder_id]
                time_left = reminder['time'] - current_time

                reminder_info = f" ‚Ññ{reminder_id}: {reminder['text']}\n" \
                                f"    {reminder['time'].strftime('%d.%m.%Y –≤ %H:%M')}\n" \
                                f"    –û—Å—Ç–∞–ª–æ—Å—å: {format_timedelta(time_left)}"

                if time_left.total_seconds() > 0:
                    active_reminders.append(reminder_info)
                else:
                    expired_reminders.append(reminder_info)
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
                    del reminders[reminder_id]
                    user_reminders[user_id].remove(reminder_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        reply_text = ""
        if active_reminders:
            reply_text += " –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n" + "\n\n".join(active_reminders)
        if expired_reminders:
            if reply_text:
                reply_text += "\n\n"
            reply_text += " –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n" + "\n\n".join(expired_reminders)

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(reply_text) > 4000:
            parts = [reply_text[i:i + 4000] for i in range(0, len(reply_text), 4000)]
            for part in parts:
                await message.reply(part)
                await asyncio.sleep(0.5)
        else:
            await message.reply(reply_text if reply_text else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

    except Exception as e:
        await message.reply(f" –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {str(e)}")


def format_timedelta(delta: timedelta) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timedelta –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    total_seconds = int(delta.total_seconds())
    days, remainder = divmod(total_seconds, 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes, seconds = divmod(remainder, 60)

    parts = []
    if days > 0:
        parts.append(f"{days} –¥–Ω")
    if hours > 0:
        parts.append(f"{hours} —á")
    if minutes > 0:
        parts.append(f"{minutes} –º–∏–Ω")
    if seconds > 0 and not (days or hours):
        parts.append(f"{seconds} —Å–µ–∫")

    return " ".join(parts) if parts else "–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã"


@dp.message(Command(commands=['delete']))
async def delete_reminder(message: Message):
    try:
        user_id = message.from_user.id
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            raise ValueError("–£–∫–∞–∂–∏—Ç–µ ‚Ññ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

        reminder_id = parts[1].strip()

        if reminder_id not in reminders:
            raise ValueError("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        if reminders[reminder_id]['user_id'] != user_id:
            raise ValueError("–≠—Ç–æ –Ω–µ –≤–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –û—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")

        if reminders[reminder_id]['timer']:
            reminders[reminder_id]['timer'].cancel()

        del reminders[reminder_id]
        user_reminders[user_id].remove(reminder_id)

        await message.reply(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Ññ{reminder_id} —É–¥–∞–ª–µ–Ω–æ!")

    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete [‚Ññ]")


async def send_reminder(reminder_id, delay):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    try:
        await asyncio.sleep(delay)

        reminder = reminders.get(reminder_id)
        if reminder:
            await bot.send_message(
                chat_id=reminder['user_id'],
                text=f" –ù–∞–ø–æ–º–∏–Ω–∞—é {reminder['text']}"
            )

            user_id = reminder['user_id']
            if reminder_id in reminders:
                del reminders[reminder_id]
            if user_id in user_reminders and reminder_id in user_reminders[user_id]:
                user_reminders[user_id].remove(reminder_id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    asyncio.run(main())