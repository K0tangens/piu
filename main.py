import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
TOKEN = '7828065577:AAGOfwVgzCsJwYPKc7K32pZZPyG6ZBVOB_g'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminders = {}
user_reminders = {}


@dp.message(Command(commands=['start']))
async def send_welcome(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n"
                        "–û—Ç–ø—Ä–∞–≤—å /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")

@dp.message(Command(commands=[ 'help']))
async def send_welcome(message: Message):
    await message.reply("üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                        "/remind_time [–≤—Ä–µ–º—è] [—Ç–µ–∫—Å—Ç] - –Ω–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30–º, 2—á15–º, 1–¥)\n"
                        "/remind_date [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è] [—Ç–µ–∫—Å—Ç] - –Ω–∞–ø–æ–º–Ω–∏—Ç—å –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12 15:30, 15:30)\n"
                        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
                        "/delete [‚Ññ] - —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n"
                        "üìù –ü—Ä–∏–º–µ—Ä—ã:\n"
                        "/remind_time 30–º –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
                        "/remind_time 2—á15–º –°–¥–µ–ª–∞—Ç—å –î–ó\n"
                        "/remind_date 25.12 15:30 –ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏\n"
                        "/remind_date 15:30 –ü–æ–æ–±–µ–¥–∞—Ç—å")

@dp.message(Command(commands=['remind_time']))
async def set_timed_reminder(message: Message):
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            raise ValueError("–û–π! –ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

        _, time_str, reminder_text = parts
        time_delta = parse_time(time_str)
        reminder_time = datetime.now() + time_delta

        await create_reminder(message.from_user.id, reminder_text, reminder_time)
        await message.reply(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
                            f"–ß–µ—Ä–µ–∑ {time_str} —è –Ω–∞–ø–æ–º–Ω—é {reminder_text}")

    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ {e}\n–§–æ—Ä–º–∞—Ç: /remind_time 30–º –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")


@dp.message(Command(commands=['remind_date']))
async def set_dated_reminder(message: Message):
    try:
        parts = message.text.split(maxsplit=3)
        if len(parts) < 3:
            raise ValueError("–û–π! –ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

        _, date_str, time_str, *text_parts = parts
        reminder_text = " ".join(text_parts) if text_parts else "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

        reminder_time = parse_datetime(date_str, time_str)
        if reminder_time < datetime.now():
            raise ValueError("–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ")

        await create_reminder(message.from_user.id, reminder_text, reminder_time)

        await message.reply(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
                            f"{reminder_time.strftime('%–¥.%–º –≤ %–ß:%–ú')} —è –Ω–∞–ø–æ–º–Ω—é"
                            f"{reminder_text}")

    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}\n–§–æ—Ä–º–∞—Ç: /remind_date 25.12 15:30 –¢–µ–∫—Å—Ç\n"
                            "–ò–ª–∏: /remind_date 15:30 –¢–µ–∫—Å—Ç")


async def create_reminder(user_id, text, reminder_time):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä"""
    reminder_id = str(len(reminders) + 1)
    time_left = (reminder_time - datetime.now()).total_seconds()

    reminders[reminder_id] = {
        'user_id': user_id,
        'text': text,
        'time': reminder_time,
        'timer': None
    }

    if user_id not in user_reminders:
        user_reminders[user_id] = []
    user_reminders[user_id].append(reminder_id)

    timer_task = asyncio.create_task(send_reminder(reminder_id, time_left))
    reminders[reminder_id]['timer'] = timer_task


def parse_time(time_str):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1h30m –≤ timedelta"""
    time_delta = timedelta()
    num = 0

    for ch in time_str:
        if ch.isdigit():
            num = num * 10 + int(ch)
        else:
            if ch == '–¥':
                time_delta += timedelta(days=num)
            elif ch == '—á':
                time_delta += timedelta(hours=num)
            elif ch == '–º':
                time_delta += timedelta(minutes=num)
            else:
                raise ValueError(f"–û–π! –í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –º–µ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ {ch}")
            num = 0

    if time_delta.total_seconds() <= 0:
        raise ValueError("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")

    return time_delta


def parse_datetime(date_str, time_str):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ datetime"""
    now = datetime.now()

    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤—Ä–µ–º—è (–º–æ–∂–µ—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è)
    try:
        if ':' in time_str:
            time_part = datetime.strptime(time_str, "%H:%M").time()
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ (–¥–µ–Ω—å –∏ –º–µ—Å—è—Ü)
        if '.' in date_str:
            date_part = datetime.strptime(date_str, "%–¥.%–º").date()
            return datetime.combine(date_part, time_part)
        else:
            # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞
            proposed_time = datetime.combine(now.date(), time_part)
            if proposed_time > now:
                return proposed_time
            else:
                return proposed_time + timedelta(days=1)

    except ValueError:
        # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –¥–∞—Ç–∞, –∞ –≤—Ä–µ–º—è (–∫–æ–≥–¥–∞ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞)
        if ':' in date_str:
            time_part = datetime.strptime(date_str, "%–ß:%–ú").time()
            proposed_time = datetime.combine(now.date(), time_part)
            if proposed_time > now:
                return proposed_time
            else:
                return proposed_time + timedelta(days=1)
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏")


@dp.message(Command(commands=['list']))
async def list_reminders(message: Message):
    user_id = message.from_user.id
    if user_id not in user_reminders or not user_reminders[user_id]:
        await message.reply("–û–π! –í—ã –Ω–∏—á–µ–≥–æ —Å—é–¥–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏")
        return

    reply_text = "–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    for reminder_id in user_reminders[user_id]:
        if reminder_id in reminders:
            rem = reminders[reminder_id]
            time_left = rem['time'] - datetime.now()

            if time_left.total_seconds() > 0:
                hours, remainder = divmod(time_left.total_seconds(), 3600)
                minutes, _ = divmod(remainder, 60)
                reply_text += f"‚Ññ{reminder_id}: {rem['text']}\n"
                reply_text += f"{rem['time'].strftime('%–¥.%–º –≤ %–ß:%–ú')} "
                reply_text += f"(–¢–∏–∫-–¢–∞–∫! –û—Å—Ç–∞–ª–æ—Å—å: {int(hours)}—á {int(minutes)}–º)\n\n"
            else:
                reply_text += f"‚Ññ{reminder_id}: {rem['text']}\n"
                reply_text += f"–î–æ–ª–∂–Ω–æ –±—ã–ª–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å: {rem['time'].strftime('%–¥.%–º –≤ %–ß:%–ú')}\n\n"

    await message.reply(reply_text)


@dp.message(Command(commands=['delete']))
async def delete_reminder(message: Message):
    try:
        user_id = message.from_user.id
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            raise ValueError("–£–∫–∞–∂–∏—Ç–µ ‚Ññ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

        reminder_id = parts[1].strip()

        if reminder_id not in reminders:
            raise ValueError("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        if reminders[reminder_id]['user_id'] != user_id:
            raise ValueError("–≠—Ç–æ –Ω–µ –≤–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –û—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")

        if reminders[reminder_id]['timer']:
            reminders[reminder_id]['timer'].cancel()

        del reminders[reminder_id]
        user_reminders[user_id].remove(reminder_id)

        await message.reply(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Ññ{reminder_id} —É–¥–∞–ª–µ–Ω–æ!")

    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete [‚Ññ]")


async def send_reminder(reminder_id, delay):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    try:
        await asyncio.sleep(delay)

        reminder = reminders.get(reminder_id)
        if reminder:
            await bot.send_message(
                chat_id=reminder['user_id'],
                text=f" –ù–∞–ø–æ–º–∏–Ω–∞—é {reminder['text']}"
            )

            user_id = reminder['user_id']
            if reminder_id in reminders:
                del reminders[reminder_id]
            if user_id in user_reminders and reminder_id in user_reminders[user_id]:
                user_reminders[user_id].remove(reminder_id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    asyncio.run(main())